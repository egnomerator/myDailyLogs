@using System.Globalization
@using MyDailyLogs.ViewModels;
@using MyDailyLogs.ViewModels.Configuration
@model List<LogEntryViewModel>

@{
    ViewBag.Title = "Home Page";

    var logEntries = Model;

    var origFirstLoadedLogEntryDateTime = logEntries.Any() ? DateTime.Parse(logEntries.First().EntryDateTime) : new DateTime();

    // arbitrary choice based on my expectation of never entring logs in the tripple+ digits in a single day
    //  -if i were to design this for other users i'd probably implement this differently
    const int maxNumbDivDigitWidth = Constants.MaxNumbDivDigitWidth;
    const string leDayDateClass = Constants.LeDayDateClass;
    const string logEntryClass = Constants.LogEntryClass;
    const string lePartClass = Constants.LePartClass;
    const string leNumbClass = Constants.LeNumbClass;
    const string leDateClass = Constants.LeDateClass;
    const string leTextClass = Constants.LeTextClass;

    const string focusLineClass = Constants.FocusLineClass;

    const string newLogEntryClass = Constants.NewLogEntryClass;
    const string newLogEntryTextInputId = Constants.NewLogEntryTextInputId + "01";
    const string newLogEntryTextInputName = Constants.NewLogEntryTextInputName + "01";
}

<div style="padding: 0px 5px 5px 5px;">

    @{
        var prevLogEntryDateTime = DateTime.MinValue;
        var leCount = 0;
        var lastLeNumb = 0;
    }
    @if (logEntries.Any())
    {
        foreach (var l in logEntries)
        {
            leCount++;
            var leInFocus = string.Empty;
            var lastLoadedLogEntry = leCount == logEntries.Count;
            if (lastLoadedLogEntry)
            {
                leInFocus = focusLineClass;
                lastLeNumb = l.EntryNumber;
            }
            var currentLogEntryDateTime = DateTime.Parse(l.EntryDateTime);
            if (currentLogEntryDateTime.Day > prevLogEntryDateTime.Day)
            {
                <div class="@leDayDateClass">@l.EntryDateTime.Substring(0, 10)</div>
                prevLogEntryDateTime = currentLogEntryDateTime;
            }

            var numb = l.EntryNumber;
            var numbStr = numb.ToString(CultureInfo.InvariantCulture);
            var numbStrLength = numbStr.Length;
            var digitDiff = maxNumbDivDigitWidth - numbStrLength + 1;
            var leNumbStr = string.Empty;
            for (var d = 0; d < digitDiff; d++)
            {
                leNumbStr += " ";
            }
            leNumbStr += numbStr + " ";

            <div class="@logEntryClass @leInFocus">
                <div class="@leDateClass @lePartClass">@l.EntryDateTime.Substring(11)</div>
                <div class="@leNumbClass @lePartClass">@leNumbStr</div>
                <div class="@leTextClass @lePartClass">@l.EntryText</div>
            </div>
        }
    }
    else
    {
        <div class="@leDayDateClass">@string.Format("{0:MM/dd/yyyy}", DateTime.Now)</div>
    }

    <div class="@logEntryClass @newLogEntryClass">
        <div class="@leDateClass @lePartClass">        ...</div>
        <div class="@leNumbClass @lePartClass"> @(lastLeNumb + 1) </div>
        <input id="@newLogEntryTextInputId" class="@leTextClass @lePartClass" type="text" name="@newLogEntryTextInputName" autofocus placeholder="Type a new log entry and hit enter to save it."/>

    </div>

</div>

@section scripts
{
    <script type="text/javascript">

        var maxNumbDivDigitWidth = @maxNumbDivDigitWidth;
        var leDayDateClass = @leDayDateClass;
        var logEntryClass = @logEntryClass;
        var lePartClass = @lePartClass;
        var leNumbClass = @leNumbClass;
        var leDateClass = @leDateClass;
        var leTextClass = @leTextClass;

        var focusLineClass = @focusLineClass;

        var newLogEntryClass = @newLogEntryClass;
        var newLogEntryTextInputId = @newLogEntryTextInputId;
        var newLogEntryTextInputName = @newLogEntryTextInputName;

        function CommonLogEntryClassesAndIds() {
            LogEntryClasses: {
                leDayDateClass,logEntryClass,lePartClass
            }
        }

        $(document)
            .on('keyup',
                '#@newLogEntryTextInputId',
                function(e) {
                    var nowUtcMs = Date.now();
                    var logEntryTextVal = $(this).innerHTML;
                    var enterKey = 13;
                    if (e.keyCode === enterKey) {
                        if (LogEntryTextIsValid(logEntryTextVal)) {
                            SaveNewLogEntryAndUpdateUI(this, logEntryTextVal, nowUtcMs, );
                        }
                    }
                });

    </script>
}

@section styles
{
    <style type="text/css">
        
        #@newLogEntryTextInputId{
            border: none;
            outline: none;
            width: 930px;
            max-width: 930px;

        }

        .@leDayDateClass{
            font-size: xx-large;
            background: lightgray;
            padding-left: 5px;
            border-top: 5px solid lightgray;
            border-bottom: 5px solid lightgray;
            margin-bottom: -1px;
        }
        .@logEntryClass {
            line-height: 0.9em;
            font-size: x-large;
            border-bottom: 1px solid #222222;
        }
        .@lePartClass{
            display: inline;
            white-space: pre;
            font-family: monospace;
        }
        .@leDateClass{

        }
        .@leNumbClass{
            background: lightgray;
        }
        .@leTextClass{ 
            
        }

    </style>
}
