@using System.Globalization
@using MyDailyLogs.ViewModels;
@using MyDailyLogs.ViewModels.Configuration
@model List<LogEntryViewModel>

@{
    ViewBag.Title = "Home Page";

    var logEntries = Model;

    var origFirstLoadedLogEntryDateTime = logEntries.Any() ? DateTime.Parse(logEntries.First().EntryDateTime) : new DateTime();

    const string logEntryListContainerId = Constants.LogEntryListContainerId + "01";
    // arbitrary choice based on my expectation of never entring logs in the tripple+ digits in a single day
    //  -if i were to design this for other users i'd probably implement this differently
    const int maxNumbDivDigitWidth = Constants.MaxNumbDivDigitWidth;
    const string leDayDateClass = Constants.LeDayDateClass;
    const string logEntryClass = Constants.LogEntryClass;
    const string lePartClass = Constants.LePartClass;
    const string leNumbClass = Constants.LeNumbClass;
    const string leDateClass = Constants.LeDateClass;
    const string leTextClass = Constants.LeTextClass;

    const string focusLineClass = Constants.FocusLineClass;

    const string newLogEntryClass = Constants.NewLogEntryClass;
    const string newLogEntryTsEllipsis = Constants.NewLogEntryTsEllipsis;
    const string newLogEntryTextInputPlaceholder = Constants.NewLogEntryTextInputPlaceholder;
    const string newLogEntryTextInputId = Constants.NewLogEntryTextInputId + "01";
    const string newLogEntryTextInputName = Constants.NewLogEntryTextInputName + "01";

    Func<ushort, string> formatLogEntryNumber = n =>
    {
        var numb = n;
        var numbStr = numb.ToString(CultureInfo.InvariantCulture);
        var numbStrLength = numbStr.Length;
        var digitDiff = maxNumbDivDigitWidth - numbStrLength + 1;
        var leNumbStr = string.Empty;
        for (var d = 0; d < digitDiff; d++)
        {
            leNumbStr += " ";
        }
        return leNumbStr + numbStr + " ";
    };
}

<div id="@logEntryListContainerId" style="padding: 0px 5px 5px 5px;">

    @{
        var prevLogEntryDateTime = DateTime.MinValue;
        var leCount = 0;
        var lastLeNumb = 0;
    }
    @if (logEntries.Any())
    {
        foreach (var l in logEntries)
        {
            leCount++;
            var leInFocus = string.Empty;
            var lastLoadedLogEntry = leCount == logEntries.Count;
            if (lastLoadedLogEntry)
            {
                leInFocus = focusLineClass;
            }
            var currentLogEntryDateTime = DateTime.Parse(l.EntryDateTime);
            if (prevLogEntryDateTime.Day < currentLogEntryDateTime.Day)
            {
                <div class="@leDayDateClass">@l.EntryDateTime.Substring(0, 10)</div>
                prevLogEntryDateTime = currentLogEntryDateTime;
            }
            var fmtLogEntryNumber = formatLogEntryNumber(l.EntryNumber);
            lastLeNumb = l.EntryNumber;
            <div class="@logEntryClass @leInFocus">
                <div class="@leDateClass @lePartClass">@l.EntryDateTime.Substring(11)</div><div class="@leNumbClass @lePartClass">@fmtLogEntryNumber</div><div class="@leTextClass @lePartClass">@l.EntryText</div><div class="hiddenScore">@l.EntryScore</div>
            </div>
        }
    }
    @{
        var currentDateTime = DateTime.Now;
        if (prevLogEntryDateTime.Day < currentDateTime.Day)
        {
            <div class="@leDayDateClass">@($"{DateTime.Now:MM/dd/yyyy}")</div>
            lastLeNumb = 0;
        }
    }
    @{
        var fmtNewLogEntryNumber = formatLogEntryNumber((ushort)(lastLeNumb + 1));
    }
    <div class="@logEntryClass @newLogEntryClass">
        <div class="@leDateClass @lePartClass">@newLogEntryTsEllipsis</div><div class="@leNumbClass @lePartClass">@fmtNewLogEntryNumber</div><input id="@newLogEntryTextInputId" class="@leTextClass @lePartClass" type="text" name="@newLogEntryTextInputName" autofocus placeholder="@newLogEntryTextInputPlaceholder"/>
    </div>
</div>

@section scripts
{
    <script type="text/javascript">

        var logEntryListContainerId = "@logEntryListContainerId";
        var maxNumbDivDigitWidth = "@maxNumbDivDigitWidth";
        var leDayDateClass = "@leDayDateClass";
        var logEntryClass = "@logEntryClass";
        var lePartClass = "@lePartClass";
        var leNumbClass = "@leNumbClass";
        var leDateClass = "@leDateClass";
        var leTextClass = "@leTextClass";

        var focusLineClass = "@focusLineClass";

        var newLogEntryClass = "@newLogEntryClass";
        var newLogEntryTsEllipsis = "@newLogEntryTsEllipsis";
        var newLogEntryTextInputPlaceholder = "@newLogEntryTextInputPlaceholder";
        var newLogEntryTextInputId = "@newLogEntryTextInputId";
        var newLogEntryTextInputName = "@newLogEntryTextInputName";

        $(document)
            .on('keyup',
                '#@newLogEntryTextInputId',
                function(e) {
                    var nowUtcMs = Date.now();
                    var logEntryTextVal = this.value;
                    var enterKey = 13;
                    if (e.keyCode === enterKey) {
                        if (LogEntryTextIsValid(logEntryTextVal)) {
                            UpdateLogEntryElementAttributeVariables(
                                    logEntryListContainerId,
                                    maxNumbDivDigitWidth,
                                    leDayDateClass,
                                    logEntryClass,
                                    lePartClass,
                                    leNumbClass,
                                    leDateClass,
                                    leTextClass,
                                    focusLineClass,
                                    newLogEntryClass,
                                    newLogEntryTsEllipsis,
                                    newLogEntryTextInputPlaceholder,
                                    newLogEntryTextInputId,
                                    newLogEntryTextInputName
                                );
                            SaveNewLogEntryAndUpdateUI(this, logEntryTextVal, nowUtcMs);
                        }
                    }
                });

    </script>
}

@section styles
{
    <style type="text/css">

        #@newLogEntryTextInputId{
            border: none;
            outline: none;
            width: 900px !important;
            max-width: 900px !important;
            padding-top: 0px;
        }
        .@leDayDateClass{
            color: #222222;
            font-size: 2.25em;
            background: lightgray;
            padding-left: 5px;
            border-top: 5px solid lightgray;
            border-bottom: 5px solid lightgray;
            margin-bottom: -1px;
        }
        .@logEntryClass {
            color: #222222;
            line-height: 0.9em;
            font-size: x-large;
            border-bottom: 0.5px solid lightgray;
        }
        .@lePartClass{
            display: inline;
            font-family: monospace;
        }
        .@leDateClass{

        }
        .@leNumbClass{
            background: lightgray;
            border-bottom: 0.5px solid lightgray;
            white-space: pre;
            margin-left: 0.25%;
        }
        .@leTextClass{
            min-width: 920px;
            margin-left: 0.25%;
        }
        .hiddenScore {
            display: none;
        }
    </style>
}
