@using System.Globalization
@using MyDailyLogs.ViewModels;
@using MyDailyLogs.ViewModels.Configuration
@model List<LogEntryViewModel>

@{
    ViewBag.Title = "Home Page";

    var logEntries = Model;

    var origFirstLoadedLogEntryDateTime = logEntries.Any() ? DateTime.Parse(logEntries.First().EntryDateTime) : new DateTime();

    const string logEntryListContainerId = Constants.LogEntryListContainerId + "01";
    // arbitrary choice based on my expectation of never entring logs in the tripple+ digits in a single day
    //  -if i were to design this for other users i'd probably implement this differently
    const int maxNumbDivDigitWidth = Constants.MaxNumbDivDigitWidth;
    const string leDayDateClass = Constants.LeDayDateClass;
    const string logEntryClass = Constants.LogEntryClass;
    const string lePartClass = Constants.LePartClass;
    const string leNumbClass = Constants.LeNumbClass;
    const string leDateClass = Constants.LeDateClass;
    const string leTextClass = Constants.LeTextClass;
    const string hiddenScoreClass = Constants.HiddenScoreClass;

    const string focusLineClass = Constants.FocusLineClass;

    const string newLogEntryClass = Constants.NewLogEntryClass;
    const string newLogEntryTsEllipsis = Constants.NewLogEntryTsEllipsis;
    const string newLogEntryTextInputPlaceholder = Constants.NewLogEntryTextInputPlaceholder;
    const string newLogEntryTextInputId = Constants.NewLogEntryTextInputId + "01";
    const string newLogEntryTextInputName = Constants.NewLogEntryTextInputName + "01";

    Func<ushort, string> formatLogEntryNumber = n =>
    {
        var numb = n;
        var numbStr = numb.ToString(CultureInfo.InvariantCulture);
        var numbStrLength = numbStr.Length;
        var digitDiff = maxNumbDivDigitWidth - numbStrLength + 1;
        var leNumbStr = string.Empty;
        for (var d = 0; d < digitDiff; d++)
        {
            leNumbStr += " ";
        }
        return leNumbStr + numbStr + " ";
    };

    const string dbInfoBarId = Constants.DbInfoBarId;
    const string dbInfoBarClass = Constants.DbInfoBarClass;
    const string dbInfoBarLblId = Constants.DbInfoBarLblId;
    const string dbInfoBarLblClass = Constants.DbInfoBarLblClass;
    const string dbInfoBarSpecialMsgAreaId = Constants.DbInfoBarSpecialMsgAreaId;
    const string dbInfoBarSpecialMsgAreaClass = Constants.DbInfoBarSpecialMsgAreaClass;
    const string dbStatusAreaId = Constants.DbStatusAreaId;
    const string dbStatusAreaClass = Constants.DbStatusAreaClass;
    const string dbStatusAreaLblId = Constants.DbStatusAreaLblId;
    const string dbStatusAreaLblClass = Constants.DbStatusAreaLblClass;
    const string dbStatusValueId = Constants.DbStatusValueId;
    const string dbStatusValueClass = Constants.DbStatusValueClass;
    const string dbStatusValueInrHtml = Constants.DbStatusValueInrHtml;
    const string dbLastCheckValueId = Constants.DbLastCheckValueId;
    const string dbLastCheckValueClass = Constants.DbLastCheckValueClass;
    const string dbUpdateBtnId = Constants.DbUpdateBtnId;
    const string dbUpdateBtnClass = Constants.DbUpdateBtnClass;
    const string dbUpdateBtnValue = Constants.DbUpdateBtnValue;
    const string dbStartBtnId = Constants.DbStartBtnId;
    const string dbStartBtnClass = Constants.DbStartBtnClass;
    const string dbStartBtnValue = Constants.DbStartBtnValue;
    const string dbSaveBtnClass = Constants.DbSaveBtnClass;
    const string dbSaveBtnValue = Constants.DbSaveBtnValue;
    const string dbSaveBtnId = Constants.DbSaveBtnId;
    const string dbSaveAndQuitAreaId = Constants.DbSaveAndQuitAreaId;
    const string dbSaveAndQuitAreaClass = Constants.DbSaveAndQuitAreaClass;
    const string dbSaveAndQuitLblId = Constants.DbSaveAndQuitLblId;
    const string dbSaveAndQuitLblClass = Constants.DbSaveAndQuitLblClass;
    const string dbBarDimClass = Constants.DbBarDimClass;
    const string dbBarMsgTextId = Constants.DbBarMsgTextId;
    const string dbBarMsgTextClass = Constants.DbBarMsgTextClass;
    const string dbBarMsgXId = Constants.DbBarMsgXId;
    const string dbBarMsgXclass = Constants.DbBarMsgXclass;
    const string hideClass = Constants.HideClass;
    const string noDisplayClass = Constants.NoDisplayClass;
    const string leUnsavedClass = Constants.LeUnsavedClass;

    const string dbBarMsgId = Constants.DbBarMsgId;
    const string dbBarMsgClass = Constants.DbBarMsgClass;
    const string dbBarMsgSuccess = Constants.DbBarMsgSuccess;
    const string dbBarMsgServiceStarted = Constants.DbBarMsgServiceStarted;
    const string dbBarMsgFail = Constants.DbBarMsgFail;
    const string dbBarMsgAutoSaveFailed = Constants.DbBarMsgAutoSaveFailed;

    const string dbStatusTextUpdating = Constants.DbStatusTextUpdating;
    const string dbStatusTextRunning = Constants.DbStatusTextRunning;
    const string dbStatusTextStopped = Constants.DbStatusTextStopped;
    const int dbStatusUpdateInterval = Constants.DbStatusUpdateInterval;

    const string dbInfoBarTitle = Constants.DbInfoBarTitle;
    const string dbStatusAreaTitle = Constants.DbStatusAreaTitle;
    const string dbUpdateBtnTitle = Constants.DbUpdateBtnTitle;
    const string dbSaveBtnTitle = Constants.DbSaveBtnTitle;
    const string dbStartBtnTitle = Constants.DbStartBtnTitle;
}

@{ Html.RenderPartial("_BackEndInfo");}
<div id="@logEntryListContainerId" class="logEntryListContainerClass">

    @{
        var prevLogEntryDateTime = DateTime.MinValue;
        var leCount = 0;
        var lastLeNumb = 0;
    }
    @if (logEntries.Any())
    {
        foreach (var l in logEntries)
        {
            leCount++;
            var leInFocus = string.Empty;
            var lastLoadedLogEntry = leCount == logEntries.Count;
            if (lastLoadedLogEntry)
            {
                leInFocus = focusLineClass;
            }
            var currentLogEntryDateTime = DateTime.Parse(l.EntryDateTime);
            if (prevLogEntryDateTime.Day < currentLogEntryDateTime.Day)
            {
                <div class="@leDayDateClass">@l.EntryDateTime.Substring(0, 10)</div>
                prevLogEntryDateTime = currentLogEntryDateTime;
            }
            var fmtLogEntryNumber = formatLogEntryNumber(l.EntryNumber);
            lastLeNumb = l.EntryNumber;
            <div class="@logEntryClass @leInFocus">
                <div class="@leDateClass @lePartClass">@l.EntryDateTime.Substring(11)</div><div class="@leNumbClass @lePartClass">@fmtLogEntryNumber</div><div class="@leTextClass @lePartClass">@l.EntryText</div><div class="@hiddenScoreClass">@l.EntryScore</div>
            </div>
        }
    }
    @{
        var currentDateTime = DateTime.Now;
        if (prevLogEntryDateTime.Day < currentDateTime.Day)
        {
            <div class="@leDayDateClass">@($"{DateTime.Now:MM/dd/yyyy}")</div>
            lastLeNumb = 0;
        }
    }
    @{
        var fmtNewLogEntryNumber = formatLogEntryNumber((ushort)(lastLeNumb + 1));
    }
    <div class="@logEntryClass @newLogEntryClass">
        <div class="@leDateClass @lePartClass">@newLogEntryTsEllipsis</div><div class="@leNumbClass @lePartClass">@fmtNewLogEntryNumber</div><input id="@newLogEntryTextInputId" class="@leTextClass @lePartClass" type="text" name="@newLogEntryTextInputName" autofocus placeholder="@newLogEntryTextInputPlaceholder"/>
    </div>
</div>

@section scripts
{
    <script type="text/javascript">

        var leNotSavingAndIsKnown = false;
        var logEntryListContainerId = "@logEntryListContainerId";
        var maxNumbDivDigitWidth = "@maxNumbDivDigitWidth";
        var leDayDateClass = "@leDayDateClass";
        var logEntryClass = "@logEntryClass";
        var lePartClass = "@lePartClass";
        var leNumbClass = "@leNumbClass";
        var leDateClass = "@leDateClass";
        var leTextClass = "@leTextClass";
        var hiddenScoreClass = "@hiddenScoreClass";

        var dbStatusTextUpdating = "@dbStatusTextUpdating";
        var dbStatusTextRunning = "@dbStatusTextRunning";
        var dbStatusTextStopped = "@dbStatusTextStopped";
        var dbStatusUpdateInterval = "@dbStatusUpdateInterval";
        var dbBarDimClass = "@dbBarDimClass";

        var dbUpdateBtnId = "@dbUpdateBtnId";
        var dbUpdateBtnClass = "@dbUpdateBtnClass";
        var dbUpdateBtnValue = "@dbUpdateBtnValue";
        var dbUpdateBtnTitle = "@dbUpdateBtnTitle";

        var dbStartBtnId = "@dbStartBtnId";
        var dbStartBtnClass = "@dbStartBtnClass";
        var dbStartBtnValue = "@dbStartBtnValue";
        var dbStartBtnTitle = "@dbStartBtnTitle";

        var dbBarMsgSuccess = "@dbBarMsgSuccess";
        var dbBarMsgServiceStarted = "@dbBarMsgServiceStarted";
        var dbBarMsgFail = "@dbBarMsgFail";
        var dbBarMsgAutoSaveFailed = "@dbBarMsgAutoSaveFailed";
        var hideClass = "@hideClass";
        var noDisplayClass = "@noDisplayClass";
        var leUnsavedClass = "@leUnsavedClass";

        var focusLineClass = "@focusLineClass";

        var newLogEntryClass = "@newLogEntryClass";
        var newLogEntryTsEllipsis = "@newLogEntryTsEllipsis";
        var newLogEntryTextInputPlaceholder = "@newLogEntryTextInputPlaceholder";
        var newLogEntryTextInputId = "@newLogEntryTextInputId";
        var newLogEntryTextInputName = "@newLogEntryTextInputName";

        $(document).ready(function() {
            UpdateLogEntryElementAttributeVariables(
                    leNotSavingAndIsKnown,
                    logEntryListContainerId,
                    maxNumbDivDigitWidth,
                    leDayDateClass,
                    logEntryClass,
                    lePartClass,
                    leNumbClass,
                    leDateClass,
                    leTextClass,
                    hiddenScoreClass,
                    dbStatusTextUpdating,
                    dbStatusTextRunning,
                    dbStatusTextStopped,
                    dbUpdateBtnId,
                    dbUpdateBtnClass,
                    dbUpdateBtnValue,
                    dbUpdateBtnTitle,
                    dbStartBtnId,
                    dbStartBtnClass,
                    dbStartBtnValue,
                    dbStartBtnTitle,
                    dbBarDimClass,
                    hideClass,
                    noDisplayClass,
                    leUnsavedClass,
                    dbBarMsgSuccess,
                    dbBarMsgServiceStarted,
                    dbBarMsgFail,
                    dbBarMsgAutoSaveFailed,
                    focusLineClass,
                    newLogEntryClass,
                    newLogEntryTsEllipsis,
                    newLogEntryTextInputPlaceholder,
                    newLogEntryTextInputId,
                    newLogEntryTextInputName
                );
            getCurrentDbSvcStatus(document.getElementById('@dbLastCheckValueId'), new Date());
        });

        setInterval(function() {
                doTheThing();
            },
            dbStatusUpdateInterval);

        function doTheThing() {
            getCurrentDbSvcStatus(document.getElementById('@dbLastCheckValueId'), new Date());
        }

        $(document)
            .on('keyup',
                '#@newLogEntryTextInputId',
                function(e) {
                    var nowUtcMs = Date.now();
                    var logEntryTextVal = this.value;
                    var enterKey = 13;
                    if (e.keyCode === enterKey) {
                        if (LogEntryTextIsValid(logEntryTextVal)) {
                            SaveNewLogEntryAndUpdateUI(this, logEntryTextVal, nowUtcMs,
                                document.getElementById('@dbBarMsgId'),
                                document.getElementById('@dbBarMsgTextId'),
                                document.getElementById('@dbBarMsgAutoSaveFailed')
                            );
                        }
                    }
                });
        $(document)
            .on('click',
                '#@dbUpdateBtnId',
                function () {
                    getCurrentDbSvcStatus(document.getElementById('@dbLastCheckValueId'), new Date());
                });
        $(document).on('click','#@dbSaveBtnId',function () {
            saveAsPrepForQuit(
                document.getElementById('@dbBarMsgId'),
                document.getElementById('@dbBarMsgTextId'),
                document.getElementById('@dbLastCheckValueId'));
        });
        $(document).on('click', '#@dbBarMsgXId', function () {
            hideXclickedMsg(document.getElementById('@dbBarMsgId'));
        });
        $(document).on('click', '#@dbStartBtnId', function () {
            handleStartBtnClick(document.getElementById('@dbBarMsgId'),document.getElementById('@dbBarMsgTextId'));
        });
        $(document).on('click', '#@dbBarMsgId', function () {
            var msgText = document.getElementById('@dbBarMsgTextId');
            if (msgText.innerHTML.indexOf('@dbBarMsgServiceStarted') === -1) return;
            saveAllUnsavedLogEntries(document.getElementById('@dbBarMsgId'), msgText);
        });

    </script>
}

@section styles
{
    <style type="text/css">

        #@newLogEntryTextInputId{
            border: none;
            outline: none;
            width: 900px !important;
            max-width: 900px !important;
            padding-top: 0px;
        }
        .@leDayDateClass{
            color: #222222;
            font-size: 2.25em;
            background: lightgray;
            padding-left: 5px;
            border-top: 5px solid lightgray;
            border-bottom: 5px solid lightgray;
            margin-bottom: -1px;
        }
        .@logEntryClass {
            color: #222222;
            line-height: 0.9em;
            font-size: x-large;
            border-bottom: 0.5px solid lightgray;
        }
        .@lePartClass{
            display: inline;
            font-family: monospace;
        }
        .@leDateClass{

        }
        .@leNumbClass{
            background: lightgray;
            border-bottom: 0.5px solid lightgray;
            border-top: 0.5px solid lightgray;
            white-space: pre;
            margin-left: 0.25%;
        }
        .@leTextClass{
            min-width: 920px;
            margin-left: 0.25%;
        }
        .@hiddenScoreClass {
            display: none;
        }
        .logEntryListContainerClass {
            display: inline-block;
            height: 80vh;
            max-height: 80vh;
            width: 100%;
            max-width: 100%;
            overflow-y: scroll;
        }
        .@dbInfoBarClass {
            float: left;
            height: 45px;
            width: 100%;
            background: #A41F16;
            color: #F2B9B6;
            text-align: center;
            margin-top: 0px;
            margin-left: 0px;
            padding: 0px;
        }
        .@dbInfoBarLblClass {
            float: left;
            height: 100%;
            width: 10%;
            font-size: 1.5em;
            padding-top: 7px;
            background: #6b0101;
            color: #F2B9B6;
        }
        .@dbStatusAreaClass {
            height: 100%;
            float: left;
            width: 30%;
        }
        .@dbStatusValueClass,
        .@dbLastCheckValueClass{ 
            padding-top: 12px;
        }
        .@dbStatusAreaLblClass {
            text-align: center;
            text-decoration: none !important;
            height: 100%;
            width: 40%;
            float: left;
        }
        .@dbStatusValueClass {
            text-align: center;
            text-decoration: none !important;
            height: 100%;
            width: 45%;
            float: right;
        }
        .@dbInfoBarSpecialMsgAreaClass {
            text-align: center;
            text-decoration: none !important;
            height: 100%;
            width: 46%;
            max-width: 46%;
            float: left;
            padding: 10px;
        }
        .@dbLastCheckValueClass {
            text-align: center;
            text-decoration: none !important;
            height: 100%;
            width: 60%;
            max-width: 60%;
            float: left;
        }
        .@dbSaveAndQuitAreaClass {
            text-align: center;
            text-decoration: none !important;
            height: 100%;
            width: 14%;
            float: right;
        }
        .@dbSaveAndQuitLblClass{ 
            text-align: right;
            text-decoration: none !important;
            height: 100%;
            width: 48%;
            float: left;
            padding-top: 3px;
        }
        .@dbStartBtnClass,
        .@dbUpdateBtnClass,
        .@dbSaveBtnClass {
            background: #D92B21;
            color: #F2B9B6;
            margin-top: 10px;
            margin: 10px 0 0 6%;
        }
        .@dbSaveBtnClass{
            margin-right: 6%;
        }
        .@dbBarMsgClass{ 
            border: 2px dotted;
        }
        .@dbBarDimClass{ 
            background: rgba(107, 1, 1, 0.48);
        }
        .@hideClass{
            visibility: hidden;
        }
        .@noDisplayClass{
            display: none;
        }
        .@dbBarMsgXclass {
            text-align: right;
            padding-right: 4px;
            display: inline;
            float: right;
            width: 15px;
            cursor: pointer;
        }
        .@leUnsavedClass {
            background: rgb(208, 49, 40)
        }

    </style>
}
